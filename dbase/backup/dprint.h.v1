/*****************************************************************************/
/**
 * @file        dprint.h
 * @brief       print definition
 * @version     1.0
 * @author      dercury
 * @date        2013-02-05
 */
/*****************************************************************************/
#ifndef DPRINT_H
#define DPRINT_H

#ifdef OS_WIN32
#include <windows.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*****************************************************************************/
#define SHORT_FILENAME          short_filename(__FILE__)

/*****************************************************************************/
#ifdef OS_WIN32

#define POS_PRINT(format, ...) \
    printf("<file: %s, function: %s, line: %u>\r\n" format, \
            SHORT_FILENAME, __FUNCTION__, __LINE__, __VA_ARGS__)
#define DEBUG_PRINT(level, format, ...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            printf("%s: " format, enum2string_prntlvl(level), __VA_ARGS__); \
        } \
    } while(0)

#define DEBUG_POS_PRINT(level, format, ...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            POS_PRINT("%s: " format, enum2string_prntlvl(level), __VA_ARGS__);\
        } \
    } while(0)

#define DEBUG_CALL(level, function, ...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            printf("%s: \r\n", enum2string_prntlvl(level)); \
            function(__VA_ARGS__); \
        } \
    } while(0)

#define DEBUG_POS_CALL(level, function, ...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            POS_PRINT("%s: \r\n", enum2string_prntlvl(level)); \
            function(__VA_ARGS__); \
        } \
    } while(0)

#define COLOR_NORMAL    FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE
#define COLOR_BLACK     0
#define COLOR_GRAY      /* ? */
#define COLOR_RED       FOREGROUND_RED
#define COLOR_GREEN     FOREGROUND_GREEN
#define COLOR_YELLOW    FOREGROUND_RED | FOREGROUND_GREEN
#define COLOR_BLUE      FOREGROUND_BLUE
#define COLOR_MAGENTA   FOREGROUND_RED | FOREGROUND_BLUE
#define COLOR_AQUA      FOREGROUND_GREEN | FOREGROUND_BLUE
#define COLOR_WHITE     FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE
#define COLOR_BLINK     FOREGROUND_INTENSITY

BOOL SetConsoleColor(WORD wAttribute);

#define COLOR_PRINT(color, format, ...) \
    do \
    { \
        SetConsoleColor(color); \
        printf(format, __VA_ARGS__); \
        SetConsoleColor(COLOR_NORMAL); \
    } while(0)

#define COLOR_POS_PRINT(color, format, ...) \
    do \
    { \
        SetConsoleColor(color); \
        POS_PRINT(format, __VA_ARGS__); \
        SetConsoleColor(COLOR_NORMAL); \
    } while(0)

#define COLOR_DEBUG_PRINT(level, format, ...) \
    do \
    { \
        switch (level) \
        { \
        case PRINT_ERROR: \
            SetConsoleColor(COLOR_RED); \
            break; \
        case PRINT_WARN: \
            SetConsoleColor(COLOR_YELLOW); \
            break; \
        case PRINT_INFO: \
            SetConsoleColor(COLOR_GREEN); \
            break; \
        default: \
            SetConsoleColor(COLOR_NORMAL); \
            break; \
        } \
        DEBUG_POS_PRINT(level, format, __VA_ARGS__); \
        SetConsoleColor(COLOR_NORMAL); \
    } while(0)

#endif /* OS_WIN32 */

#ifdef OS_LINUX

#define POS_PRINT(format, args...) \
    printf("<file: %s, function: %s, line: %u>\r\n" format, \
            SHORT_FILENAME, __FUNCTION__, __LINE__, ##args)

#define DEBUG_PRINT(level, format, args...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            printf("%s: " format, enum2string_prntlvl(level), ##args);\
        } \
    } while(0)

#define DEBUG_POS_PRINT(level, format, args...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            POS_PRINT("%s: " format, enum2string_prntlvl(level), ##args);\
        } \
    } while(0)

#define DEBUG_CALL(level, function, args...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            printf("%s: \r\n", enum2string_prntlvl(level)); \
            function(##args); \
        } \
    } while(0)

#define DEBUG_POS_CALL(level, function, args...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            POS_PRINT("%s: \r\n", enum2string_prntlvl(level)); \
            function(##args); \
        } \
    } while(0)

#define COLOR_NORMAL    "\033[0m"
#define COLOR_BLACK     "\033[30m"
#define COLOR_GRAY      "\033[1;30m"
#define COLOR_RED       "\033[1;31m"
#define COLOR_GREEN     "\033[1;32m"
#define COLOR_YELLOW    "\033[1;33m"
#define COLOR_BLUE      "\033[1;34m"
#define COLOR_MAGENTA   "\033[1;35m"
#define COLOR_AQUA      "\033[1;36m"
#define COLOR_WHITE     "\033[1;37m"
#define COLOR_BLINK     "\033[5m"

#define COLOR_PRINT(color, format, args...) \
    printf(color format, ##args); \
    printf(COLOR_NORMAL "")
//#define COLOR_PRINT(color, format, ...)    printf(color format, __VA_ARGS__)
//#define COLOR_PRINT(color, ...)    printf(color __VA_ARGS__)

#define COLOR_POS_PRINT(color, format, args...)   \
    printf(color "<file: %s, function: %s, line: %u>\n\t" format, \
            SHORT_FILENAME, __FUNCTION__, __LINE__, ##args); \
    printf(COLOR_NORMAL "")

#define COLOR_DEBUG_PRINT(level, format, args...) \
    do \
    { \
        ePrntLvl g_level = PRINT_ERROR; \
        get_print_level(&g_level); \
        if ((level) <= g_level) \
        { \
            switch (level) \
            { \
            case PRINT_ERROR: \
                printf(COLOR_RED "<file: %s, function: %s, line: %u>\n\t%s: " format, \
                    SHORT_FILENAME, __FUNCTION__, __LINE__, enum2string_prntlvl(level), ##args); \
                break; \
            case PRINT_WARN: \
                printf(COLOR_YELLOW "<file: %s, function: %s, line: %u>\n\t%s: " format, \
                    SHORT_FILENAME, __FUNCTION__, __LINE__, enum2string_prntlvl(level), ##args); \
                break; \
            case PRINT_INFO: \
                printf(COLOR_GREEN "<file: %s, function: %s, line: %u>\n\t%s: " format, \
                    SHORT_FILENAME, __FUNCTION__, __LINE__, enum2string_prntlvl(level), ##args); \
                break; \
            default: \
                printf(COLOR_NORMAL "<file: %s, function: %s, line: %u>\n\t%s: " format, \
                    SHORT_FILENAME, __FUNCTION__, __LINE__, enum2string_prntlvl(level), ##args); \
                break; \
            } \
        } \
        printf(COLOR_NORMAL ""); \
    } while(0)

#endif /* OS_LINUX */

/*****************************************************************************/
eFuncRtn set_print_level(ePrntLvl level);
eFuncRtn get_print_level(ePrntLvl *level);

/*****************************************************************************/

/*****************************************************************************/

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* DPRINT_H */

